/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package chatservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-19")
public class ChatService {

  public interface Iface {

    public void nick(String nickname) throws org.apache.thrift.TException;

    public void join(String channelname, String nick) throws org.apache.thrift.TException;

    public void leave(String channel, String nick) throws org.apache.thrift.TException;

    public void exit(String nick) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void nick(String nickname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void join(String channelname, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void leave(String channel, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exit(String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void nick(String nickname) throws org.apache.thrift.TException
    {
      send_nick(nickname);
    }

    public void send_nick(String nickname) throws org.apache.thrift.TException
    {
      nick_args args = new nick_args();
      args.setNickname(nickname);
      sendBase("nick", args);
    }

    public void join(String channelname, String nick) throws org.apache.thrift.TException
    {
      send_join(channelname, nick);
    }

    public void send_join(String channelname, String nick) throws org.apache.thrift.TException
    {
      join_args args = new join_args();
      args.setChannelname(channelname);
      args.setNick(nick);
      sendBase("join", args);
    }

    public void leave(String channel, String nick) throws org.apache.thrift.TException
    {
      send_leave(channel, nick);
    }

    public void send_leave(String channel, String nick) throws org.apache.thrift.TException
    {
      leave_args args = new leave_args();
      args.setChannel(channel);
      args.setNick(nick);
      sendBase("leave", args);
    }

    public void exit(String nick) throws org.apache.thrift.TException
    {
      send_exit(nick);
    }

    public void send_exit(String nick) throws org.apache.thrift.TException
    {
      exit_args args = new exit_args();
      args.setNick(nick);
      sendBase("exit", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void nick(String nickname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nick_call method_call = new nick_call(nickname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nick_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nickname;
      public nick_call(String nickname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.nickname = nickname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nick", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        nick_args args = new nick_args();
        args.setNickname(nickname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void join(String channelname, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      join_call method_call = new join_call(channelname, nick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class join_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelname;
      private String nick;
      public join_call(String channelname, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.channelname = channelname;
        this.nick = nick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        join_args args = new join_args();
        args.setChannelname(channelname);
        args.setNick(nick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void leave(String channel, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      leave_call method_call = new leave_call(channel, nick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class leave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channel;
      private String nick;
      public leave_call(String channel, String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.channel = channel;
        this.nick = nick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("leave", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        leave_args args = new leave_args();
        args.setChannel(channel);
        args.setNick(nick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void exit(String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exit_call method_call = new exit_call(nick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nick;
      public exit_call(String nick, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.nick = nick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exit", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        exit_args args = new exit_args();
        args.setNick(nick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("nick", new nick());
      processMap.put("join", new join());
      processMap.put("leave", new leave());
      processMap.put("exit", new exit());
      return processMap;
    }

    public static class nick<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nick_args> {
      public nick() {
        super("nick");
      }

      public nick_args getEmptyArgsInstance() {
        return new nick_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, nick_args args) throws org.apache.thrift.TException {
        iface.nick(args.nickname);
        return null;
      }
    }

    public static class join<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join_args> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, join_args args) throws org.apache.thrift.TException {
        iface.join(args.channelname, args.nick);
        return null;
      }
    }

    public static class leave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, leave_args> {
      public leave() {
        super("leave");
      }

      public leave_args getEmptyArgsInstance() {
        return new leave_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, leave_args args) throws org.apache.thrift.TException {
        iface.leave(args.channel, args.nick);
        return null;
      }
    }

    public static class exit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exit_args> {
      public exit() {
        super("exit");
      }

      public exit_args getEmptyArgsInstance() {
        return new exit_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, exit_args args) throws org.apache.thrift.TException {
        iface.exit(args.nick);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("nick", new nick());
      processMap.put("join", new join());
      processMap.put("leave", new leave());
      processMap.put("exit", new exit());
      return processMap;
    }

    public static class nick<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nick_args, Void> {
      public nick() {
        super("nick");
      }

      public nick_args getEmptyArgsInstance() {
        return new nick_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, nick_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.nick(args.nickname,resultHandler);
      }
    }

    public static class join<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join_args, Void> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, join_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.join(args.channelname, args.nick,resultHandler);
      }
    }

    public static class leave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, leave_args, Void> {
      public leave() {
        super("leave");
      }

      public leave_args getEmptyArgsInstance() {
        return new leave_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, leave_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.leave(args.channel, args.nick,resultHandler);
      }
    }

    public static class exit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exit_args, Void> {
      public exit() {
        super("exit");
      }

      public exit_args getEmptyArgsInstance() {
        return new exit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, exit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.exit(args.nick,resultHandler);
      }
    }

  }

  public static class nick_args implements org.apache.thrift.TBase<nick_args, nick_args._Fields>, java.io.Serializable, Cloneable, Comparable<nick_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nick_args");

    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new nick_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new nick_argsTupleSchemeFactory());
    }

    public String nickname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NICKNAME((short)1, "nickname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NICKNAME
            return NICKNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nick_args.class, metaDataMap);
    }

    public nick_args() {
    }

    public nick_args(
      String nickname)
    {
      this();
      this.nickname = nickname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nick_args(nick_args other) {
      if (other.isSetNickname()) {
        this.nickname = other.nickname;
      }
    }

    public nick_args deepCopy() {
      return new nick_args(this);
    }

    @Override
    public void clear() {
      this.nickname = null;
    }

    public String getNickname() {
      return this.nickname;
    }

    public nick_args setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public void unsetNickname() {
      this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
      return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
      if (!value) {
        this.nickname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NICKNAME:
        return getNickname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NICKNAME:
        return isSetNickname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof nick_args)
        return this.equals((nick_args)that);
      return false;
    }

    public boolean equals(nick_args that) {
      if (that == null)
        return false;

      boolean this_present_nickname = true && this.isSetNickname();
      boolean that_present_nickname = true && that.isSetNickname();
      if (this_present_nickname || that_present_nickname) {
        if (!(this_present_nickname && that_present_nickname))
          return false;
        if (!this.nickname.equals(that.nickname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nickname = true && (isSetNickname());
      list.add(present_nickname);
      if (present_nickname)
        list.add(nickname);

      return list.hashCode();
    }

    @Override
    public int compareTo(nick_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNickname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("nick_args(");
      boolean first = true;

      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nick_argsStandardSchemeFactory implements SchemeFactory {
      public nick_argsStandardScheme getScheme() {
        return new nick_argsStandardScheme();
      }
    }

    private static class nick_argsStandardScheme extends StandardScheme<nick_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nick_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NICKNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nick_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nickname != null) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nick_argsTupleSchemeFactory implements SchemeFactory {
      public nick_argsTupleScheme getScheme() {
        return new nick_argsTupleScheme();
      }
    }

    private static class nick_argsTupleScheme extends TupleScheme<nick_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNickname()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNickname()) {
          oprot.writeString(struct.nickname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nick_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nickname = iprot.readString();
          struct.setNicknameIsSet(true);
        }
      }
    }

  }

  public static class join_args implements org.apache.thrift.TBase<join_args, join_args._Fields>, java.io.Serializable, Cloneable, Comparable<join_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_args");

    private static final org.apache.thrift.protocol.TField CHANNELNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("nick", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_argsTupleSchemeFactory());
    }

    public String channelname; // required
    public String nick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNELNAME((short)1, "channelname"),
      NICK((short)2, "nick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNELNAME
            return CHANNELNAME;
          case 2: // NICK
            return NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNELNAME, new org.apache.thrift.meta_data.FieldMetaData("channelname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NICK, new org.apache.thrift.meta_data.FieldMetaData("nick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
    }

    public join_args() {
    }

    public join_args(
      String channelname,
      String nick)
    {
      this();
      this.channelname = channelname;
      this.nick = nick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_args(join_args other) {
      if (other.isSetChannelname()) {
        this.channelname = other.channelname;
      }
      if (other.isSetNick()) {
        this.nick = other.nick;
      }
    }

    public join_args deepCopy() {
      return new join_args(this);
    }

    @Override
    public void clear() {
      this.channelname = null;
      this.nick = null;
    }

    public String getChannelname() {
      return this.channelname;
    }

    public join_args setChannelname(String channelname) {
      this.channelname = channelname;
      return this;
    }

    public void unsetChannelname() {
      this.channelname = null;
    }

    /** Returns true if field channelname is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelname() {
      return this.channelname != null;
    }

    public void setChannelnameIsSet(boolean value) {
      if (!value) {
        this.channelname = null;
      }
    }

    public String getNick() {
      return this.nick;
    }

    public join_args setNick(String nick) {
      this.nick = nick;
      return this;
    }

    public void unsetNick() {
      this.nick = null;
    }

    /** Returns true if field nick is set (has been assigned a value) and false otherwise */
    public boolean isSetNick() {
      return this.nick != null;
    }

    public void setNickIsSet(boolean value) {
      if (!value) {
        this.nick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNELNAME:
        if (value == null) {
          unsetChannelname();
        } else {
          setChannelname((String)value);
        }
        break;

      case NICK:
        if (value == null) {
          unsetNick();
        } else {
          setNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNELNAME:
        return getChannelname();

      case NICK:
        return getNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNELNAME:
        return isSetChannelname();
      case NICK:
        return isSetNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_args)
        return this.equals((join_args)that);
      return false;
    }

    public boolean equals(join_args that) {
      if (that == null)
        return false;

      boolean this_present_channelname = true && this.isSetChannelname();
      boolean that_present_channelname = true && that.isSetChannelname();
      if (this_present_channelname || that_present_channelname) {
        if (!(this_present_channelname && that_present_channelname))
          return false;
        if (!this.channelname.equals(that.channelname))
          return false;
      }

      boolean this_present_nick = true && this.isSetNick();
      boolean that_present_nick = true && that.isSetNick();
      if (this_present_nick || that_present_nick) {
        if (!(this_present_nick && that_present_nick))
          return false;
        if (!this.nick.equals(that.nick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelname = true && (isSetChannelname());
      list.add(present_channelname);
      if (present_channelname)
        list.add(channelname);

      boolean present_nick = true && (isSetNick());
      list.add(present_nick);
      if (present_nick)
        list.add(nick);

      return list.hashCode();
    }

    @Override
    public int compareTo(join_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelname()).compareTo(other.isSetChannelname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelname, other.channelname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNick()).compareTo(other.isSetNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick, other.nick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_args(");
      boolean first = true;

      sb.append("channelname:");
      if (this.channelname == null) {
        sb.append("null");
      } else {
        sb.append(this.channelname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nick:");
      if (this.nick == null) {
        sb.append("null");
      } else {
        sb.append(this.nick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_argsStandardSchemeFactory implements SchemeFactory {
      public join_argsStandardScheme getScheme() {
        return new join_argsStandardScheme();
      }
    }

    private static class join_argsStandardScheme extends StandardScheme<join_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNELNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelname = iprot.readString();
                struct.setChannelnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nick = iprot.readString();
                struct.setNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelname != null) {
          oprot.writeFieldBegin(CHANNELNAME_FIELD_DESC);
          oprot.writeString(struct.channelname);
          oprot.writeFieldEnd();
        }
        if (struct.nick != null) {
          oprot.writeFieldBegin(NICK_FIELD_DESC);
          oprot.writeString(struct.nick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_argsTupleSchemeFactory implements SchemeFactory {
      public join_argsTupleScheme getScheme() {
        return new join_argsTupleScheme();
      }
    }

    private static class join_argsTupleScheme extends TupleScheme<join_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelname()) {
          optionals.set(0);
        }
        if (struct.isSetNick()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannelname()) {
          oprot.writeString(struct.channelname);
        }
        if (struct.isSetNick()) {
          oprot.writeString(struct.nick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channelname = iprot.readString();
          struct.setChannelnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nick = iprot.readString();
          struct.setNickIsSet(true);
        }
      }
    }

  }

  public static class leave_args implements org.apache.thrift.TBase<leave_args, leave_args._Fields>, java.io.Serializable, Cloneable, Comparable<leave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("leave_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("nick", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new leave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new leave_argsTupleSchemeFactory());
    }

    public String channel; // required
    public String nick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL((short)1, "channel"),
      NICK((short)2, "nick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL
            return CHANNEL;
          case 2: // NICK
            return NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NICK, new org.apache.thrift.meta_data.FieldMetaData("nick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(leave_args.class, metaDataMap);
    }

    public leave_args() {
    }

    public leave_args(
      String channel,
      String nick)
    {
      this();
      this.channel = channel;
      this.nick = nick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leave_args(leave_args other) {
      if (other.isSetChannel()) {
        this.channel = other.channel;
      }
      if (other.isSetNick()) {
        this.nick = other.nick;
      }
    }

    public leave_args deepCopy() {
      return new leave_args(this);
    }

    @Override
    public void clear() {
      this.channel = null;
      this.nick = null;
    }

    public String getChannel() {
      return this.channel;
    }

    public leave_args setChannel(String channel) {
      this.channel = channel;
      return this;
    }

    public void unsetChannel() {
      this.channel = null;
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return this.channel != null;
    }

    public void setChannelIsSet(boolean value) {
      if (!value) {
        this.channel = null;
      }
    }

    public String getNick() {
      return this.nick;
    }

    public leave_args setNick(String nick) {
      this.nick = nick;
      return this;
    }

    public void unsetNick() {
      this.nick = null;
    }

    /** Returns true if field nick is set (has been assigned a value) and false otherwise */
    public boolean isSetNick() {
      return this.nick != null;
    }

    public void setNickIsSet(boolean value) {
      if (!value) {
        this.nick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((String)value);
        }
        break;

      case NICK:
        if (value == null) {
          unsetNick();
        } else {
          setNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL:
        return getChannel();

      case NICK:
        return getNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL:
        return isSetChannel();
      case NICK:
        return isSetNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leave_args)
        return this.equals((leave_args)that);
      return false;
    }

    public boolean equals(leave_args that) {
      if (that == null)
        return false;

      boolean this_present_channel = true && this.isSetChannel();
      boolean that_present_channel = true && that.isSetChannel();
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (!this.channel.equals(that.channel))
          return false;
      }

      boolean this_present_nick = true && this.isSetNick();
      boolean that_present_nick = true && that.isSetNick();
      if (this_present_nick || that_present_nick) {
        if (!(this_present_nick && that_present_nick))
          return false;
        if (!this.nick.equals(that.nick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channel = true && (isSetChannel());
      list.add(present_channel);
      if (present_channel)
        list.add(channel);

      boolean present_nick = true && (isSetNick());
      list.add(present_nick);
      if (present_nick)
        list.add(nick);

      return list.hashCode();
    }

    @Override
    public int compareTo(leave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNick()).compareTo(other.isSetNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick, other.nick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("leave_args(");
      boolean first = true;

      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nick:");
      if (this.nick == null) {
        sb.append("null");
      } else {
        sb.append(this.nick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class leave_argsStandardSchemeFactory implements SchemeFactory {
      public leave_argsStandardScheme getScheme() {
        return new leave_argsStandardScheme();
      }
    }

    private static class leave_argsStandardScheme extends StandardScheme<leave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, leave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channel = iprot.readString();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nick = iprot.readString();
                struct.setNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, leave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channel != null) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          oprot.writeString(struct.channel);
          oprot.writeFieldEnd();
        }
        if (struct.nick != null) {
          oprot.writeFieldBegin(NICK_FIELD_DESC);
          oprot.writeString(struct.nick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class leave_argsTupleSchemeFactory implements SchemeFactory {
      public leave_argsTupleScheme getScheme() {
        return new leave_argsTupleScheme();
      }
    }

    private static class leave_argsTupleScheme extends TupleScheme<leave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, leave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannel()) {
          optionals.set(0);
        }
        if (struct.isSetNick()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannel()) {
          oprot.writeString(struct.channel);
        }
        if (struct.isSetNick()) {
          oprot.writeString(struct.nick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, leave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channel = iprot.readString();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nick = iprot.readString();
          struct.setNickIsSet(true);
        }
      }
    }

  }

  public static class exit_args implements org.apache.thrift.TBase<exit_args, exit_args._Fields>, java.io.Serializable, Cloneable, Comparable<exit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exit_args");

    private static final org.apache.thrift.protocol.TField NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("nick", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exit_argsTupleSchemeFactory());
    }

    public String nick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NICK((short)1, "nick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NICK
            return NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NICK, new org.apache.thrift.meta_data.FieldMetaData("nick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exit_args.class, metaDataMap);
    }

    public exit_args() {
    }

    public exit_args(
      String nick)
    {
      this();
      this.nick = nick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exit_args(exit_args other) {
      if (other.isSetNick()) {
        this.nick = other.nick;
      }
    }

    public exit_args deepCopy() {
      return new exit_args(this);
    }

    @Override
    public void clear() {
      this.nick = null;
    }

    public String getNick() {
      return this.nick;
    }

    public exit_args setNick(String nick) {
      this.nick = nick;
      return this;
    }

    public void unsetNick() {
      this.nick = null;
    }

    /** Returns true if field nick is set (has been assigned a value) and false otherwise */
    public boolean isSetNick() {
      return this.nick != null;
    }

    public void setNickIsSet(boolean value) {
      if (!value) {
        this.nick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NICK:
        if (value == null) {
          unsetNick();
        } else {
          setNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NICK:
        return getNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NICK:
        return isSetNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exit_args)
        return this.equals((exit_args)that);
      return false;
    }

    public boolean equals(exit_args that) {
      if (that == null)
        return false;

      boolean this_present_nick = true && this.isSetNick();
      boolean that_present_nick = true && that.isSetNick();
      if (this_present_nick || that_present_nick) {
        if (!(this_present_nick && that_present_nick))
          return false;
        if (!this.nick.equals(that.nick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nick = true && (isSetNick());
      list.add(present_nick);
      if (present_nick)
        list.add(nick);

      return list.hashCode();
    }

    @Override
    public int compareTo(exit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNick()).compareTo(other.isSetNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick, other.nick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exit_args(");
      boolean first = true;

      sb.append("nick:");
      if (this.nick == null) {
        sb.append("null");
      } else {
        sb.append(this.nick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exit_argsStandardSchemeFactory implements SchemeFactory {
      public exit_argsStandardScheme getScheme() {
        return new exit_argsStandardScheme();
      }
    }

    private static class exit_argsStandardScheme extends StandardScheme<exit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nick = iprot.readString();
                struct.setNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nick != null) {
          oprot.writeFieldBegin(NICK_FIELD_DESC);
          oprot.writeString(struct.nick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exit_argsTupleSchemeFactory implements SchemeFactory {
      public exit_argsTupleScheme getScheme() {
        return new exit_argsTupleScheme();
      }
    }

    private static class exit_argsTupleScheme extends TupleScheme<exit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNick()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNick()) {
          oprot.writeString(struct.nick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nick = iprot.readString();
          struct.setNickIsSet(true);
        }
      }
    }

  }

}
